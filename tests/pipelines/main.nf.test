nextflow_pipeline {

    name "Test OneRoof Main Pipeline"
    script "main.nf"

    tag "pipeline"
    tag "main"
    tag "oneroof"

    test("Main pipeline - Illumina minimal test") {

        when {
            params {
                // Input data
                illumina_fastq_dir = "${projectDir}/tests/data/illumina_reads"
                primer_bed = "${projectDir}/tests/data/test_primers.bed"
                refseq = "${projectDir}/tests/data/test_reference.fasta"
                ref_gbk = "${projectDir}/tests/data/test_reference.gbk"

                // Output directories
                consensus = "${launchDir}/consensus"
                ivar = "${launchDir}/ivar"
                mosdepth = "${launchDir}/mosdepth"
                fastqc = "${launchDir}/fastqc"
                bam = "${launchDir}/bam"

                // Parameters
                min_variant_frequency = 0.05
                min_consensus_freq = 0.75
                min_depth_coverage = 10
                min_len = 100
                max_len = 2000

                // Disable optional features for minimal test
                metagenome_ref = ""
                sylph_tax_db = ""
                contamination_fasta = ""
                snpeff_config = ""
                slack_channel_id = ""
                slack_hook_url = ""
            }
        }

        then {
            assert workflow.success
            assert workflow.trace.succeeded().size() > 0

            // Check key output files exist
            assert path("${launchDir}/consensus").exists()
            assert path("${launchDir}/ivar").exists()
            assert path("${launchDir}/bam").exists()
        }

    }

    test("Main pipeline - Nanopore minimal test") {

        when {
            params {
                // Input data
                fastq_dir = "${projectDir}/tests/data/nanopore_reads"
                primer_bed = "${projectDir}/tests/data/test_primers.bed"
                refseq = "${projectDir}/tests/data/test_reference.fasta"
                ref_gbk = "${projectDir}/tests/data/test_reference.gbk"

                // Output directories
                consensus = "${launchDir}/consensus"
                ivar = "${launchDir}/ivar"
                mosdepth = "${launchDir}/mosdepth"
                fastqc = "${launchDir}/fastqc"
                bam = "${launchDir}/bam"

                // Parameters
                min_variant_frequency = 0.10
                min_consensus_freq = 0.75
                min_depth_coverage = 10
                min_len = 100
                max_len = 5000

                // Disable optional features for minimal test
                metagenome_ref = ""
                sylph_tax_db = ""
                contamination_fasta = ""
                snpeff_config = ""
                slack_channel_id = ""
                slack_hook_url = ""
            }
        }

        then {
            assert workflow.success
            assert workflow.trace.succeeded().size() > 0

            // Check key output files exist
            assert path("${launchDir}/consensus").exists()
            assert path("${launchDir}/ivar").exists()
            assert path("${launchDir}/bam").exists()
        }

    }

    test("Main pipeline - Missing reference sequence") {

        when {
            params {
                illumina_fastq_dir = "${projectDir}/tests/data/illumina_reads"
                refseq = ""
                primer_bed = "${projectDir}/tests/data/test_primers.bed"
            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus != 0
        }

    }

}
