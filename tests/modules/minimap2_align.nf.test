nextflow_process {

    name "Test ALIGN_WITH_PRESET process"
    script "modules/minimap2.nf"
    process "ALIGN_WITH_PRESET"

    tag "modules"
    tag "minimap2"
    tag "alignment"

    test("ALIGN_WITH_PRESET - Illumina reads") {

        when {
            params {
                platform = "illumina"
                secondary = false
                min_len = 100
                max_len = 2000
            }

            process {
                """
                input[0] = Channel.of(['sample1', file("${projectDir}/tests/data/illumina_reads/sample1.fastq.gz")])
                input[1] = file("${projectDir}/tests/data/test_reference.fasta")
                """
            }
        }

        then {
            assert process.success
            assert process.out[0].size() == 1

            with(process.out[0]) {
                assert it[0] == 'sample1'
                assert it[1].name == 'sample1.sam'
                assert it[1].size() > 0

                // Check SAM file has proper header
                def samContent = it[1].text
                assert samContent.contains('@HD')
                assert samContent.contains('@SQ')
            }
        }

    }

    test("ALIGN_WITH_PRESET - Nanopore reads") {

        when {
            params {
                platform = "ont"
                secondary = false
                min_len = 100
                max_len = 5000
            }

            process {
                """
                input[0] = Channel.of(['barcode01', file("${projectDir}/tests/data/nanopore_reads/barcode01.fastq.gz")])
                input[1] = file("${projectDir}/tests/data/test_reference.fasta")
                """
            }
        }

        then {
            assert process.success
            assert process.out[0].size() == 1

            with(process.out[0]) {
                assert it[0] == 'barcode01'
                assert it[1].name == 'barcode01.sam'
                assert it[1].size() > 0

                // Check SAM file has proper header
                def samContent = it[1].text
                assert samContent.contains('@HD')
                assert samContent.contains('@SQ')
                assert samContent.contains('@PG')
                assert samContent.contains('minimap2')
            }
        }

    }

    test("ALIGN_WITH_PRESET - Empty FASTQ") {

        when {
            params {
                platform = "illumina"
                secondary = false
                min_len = 100
                max_len = 2000
            }

            process {
                """
                // Create empty FASTQ file
                def emptyFastq = file("${workDir}/empty.fastq")
                emptyFastq.text = ""

                input[0] = Channel.of(['empty_sample', emptyFastq])
                input[1] = file("${projectDir}/tests/data/test_reference.fasta")
                """
            }
        }

        then {
            assert process.success

            with(process.out[0]) {
                assert it[0] == 'empty_sample'
                assert it[1].name == 'empty_sample.sam'
                // SAM file should contain only headers for empty input
                def samContent = it[1].text
                assert samContent.contains('@HD')
                assert samContent.contains('@SQ')
                assert !samContent.contains('\t') || samContent.split('\n').findAll { !it.startsWith('@') }.size() == 0
            }
        }

    }

    test("ALIGN_WITH_PRESET - Test length filtering") {

        when {
            params {
                platform = "illumina"
                secondary = false
                min_len = 150
                max_len = 300
            }

            process {
                """
                // Create test FASTQ with reads of different lengths
                def testFastq = file("${workDir}/test_lengths.fastq")
                testFastq.text = '''@read1
ACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGT
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
@read2
ACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGT
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
@read3

+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
'''

                input[0] = Channel.of(['length_test', testFastq])
                input[1] = file("${projectDir}/tests/data/test_reference.fasta")
                """
            }
        }

        then {
            assert process.success

            with(process.out[0]) {
                assert it[0] == 'length_test'
                assert it[1].name == 'length_test.sam'
                assert it[1].size() > 0

                // Only read2 (200bp) should pass the length filter
                def samContent = it[1].text
                def alignedReads = samContent.split('\n').findAll { !it.startsWith('@') && it.trim() }
                assert alignedReads.any { it.contains('read2') }
                assert !alignedReads.any { it.contains('read1') } // Too short
                assert !alignedReads.any { it.contains('read3') } // Too long
            }
        }

    }

}
